{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "09ff6f9e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:34.242518Z",
     "iopub.status.busy": "2024-06-13T15:58:34.242138Z",
     "iopub.status.idle": "2024-06-13T15:58:47.754118Z",
     "shell.execute_reply": "2024-06-13T15:58:47.753326Z"
    },
    "papermill": {
     "duration": 13.524344,
     "end_time": "2024-06-13T15:58:47.756474",
     "exception": false,
     "start_time": "2024-06-13T15:58:34.232130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-06-13 15:58:37.834830: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-06-13 15:58:37.834945: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-06-13 15:58:37.959221: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import pandas as  pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import tensorflow as tf\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import MinMaxScaler\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fca332de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:47.774769Z",
     "iopub.status.busy": "2024-06-13T15:58:47.774261Z",
     "iopub.status.idle": "2024-06-13T15:58:48.080426Z",
     "shell.execute_reply": "2024-06-13T15:58:48.079621Z"
    },
    "papermill": {
     "duration": 0.31761,
     "end_time": "2024-06-13T15:58:48.082796",
     "exception": false,
     "start_time": "2024-06-13T15:58:47.765186",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataset=pd.read_csv(\"/kaggle/input/delhi-weather-data/testset.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9990ecca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:48.100710Z",
     "iopub.status.busy": "2024-06-13T15:58:48.100418Z",
     "iopub.status.idle": "2024-06-13T15:58:48.131280Z",
     "shell.execute_reply": "2024-06-13T15:58:48.130411Z"
    },
    "papermill": {
     "duration": 0.041966,
     "end_time": "2024-06-13T15:58:48.133262",
     "exception": false,
     "start_time": "2024-06-13T15:58:48.091296",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime_utc</th>\n",
       "      <th>_conds</th>\n",
       "      <th>_dewptm</th>\n",
       "      <th>_fog</th>\n",
       "      <th>_hail</th>\n",
       "      <th>_heatindexm</th>\n",
       "      <th>_hum</th>\n",
       "      <th>_precipm</th>\n",
       "      <th>_pressurem</th>\n",
       "      <th>_rain</th>\n",
       "      <th>_snow</th>\n",
       "      <th>_tempm</th>\n",
       "      <th>_thunder</th>\n",
       "      <th>_tornado</th>\n",
       "      <th>_vism</th>\n",
       "      <th>_wdird</th>\n",
       "      <th>_wdire</th>\n",
       "      <th>_wgustm</th>\n",
       "      <th>_windchillm</th>\n",
       "      <th>_wspdm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19961101-11:00</td>\n",
       "      <td>Smoke</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>27.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1010.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>280.0</td>\n",
       "      <td>West</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19961101-12:00</td>\n",
       "      <td>Smoke</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-9999.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>North</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19961101-13:00</td>\n",
       "      <td>Smoke</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>44.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-9999.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>North</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19961101-14:00</td>\n",
       "      <td>Smoke</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1010.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>North</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19961101-16:00</td>\n",
       "      <td>Smoke</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>47.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1011.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>North</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     datetime_utc  _conds   _dewptm   _fog   _hail   _heatindexm   _hum  \\\n",
       "0  19961101-11:00   Smoke       9.0      0       0           NaN   27.0   \n",
       "1  19961101-12:00   Smoke      10.0      0       0           NaN   32.0   \n",
       "2  19961101-13:00   Smoke      11.0      0       0           NaN   44.0   \n",
       "3  19961101-14:00   Smoke      10.0      0       0           NaN   41.0   \n",
       "4  19961101-16:00   Smoke      11.0      0       0           NaN   47.0   \n",
       "\n",
       "    _precipm   _pressurem   _rain   _snow   _tempm   _thunder   _tornado  \\\n",
       "0        NaN       1010.0       0       0     30.0          0          0   \n",
       "1        NaN      -9999.0       0       0     28.0          0          0   \n",
       "2        NaN      -9999.0       0       0     24.0          0          0   \n",
       "3        NaN       1010.0       0       0     24.0          0          0   \n",
       "4        NaN       1011.0       0       0     23.0          0          0   \n",
       "\n",
       "    _vism   _wdird  _wdire   _wgustm   _windchillm   _wspdm  \n",
       "0     5.0    280.0    West       NaN           NaN      7.4  \n",
       "1     NaN      0.0   North       NaN           NaN      NaN  \n",
       "2     NaN      0.0   North       NaN           NaN      NaN  \n",
       "3     2.0      0.0   North       NaN           NaN      NaN  \n",
       "4     1.2      0.0   North       NaN           NaN      0.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a4478336",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:48.151701Z",
     "iopub.status.busy": "2024-06-13T15:58:48.151441Z",
     "iopub.status.idle": "2024-06-13T15:58:48.155017Z",
     "shell.execute_reply": "2024-06-13T15:58:48.154209Z"
    },
    "papermill": {
     "duration": 0.014801,
     "end_time": "2024-06-13T15:58:48.156887",
     "exception": false,
     "start_time": "2024-06-13T15:58:48.142086",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# dataset[\"_tempm\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "705101c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:48.174809Z",
     "iopub.status.busy": "2024-06-13T15:58:48.174555Z",
     "iopub.status.idle": "2024-06-13T15:58:48.179265Z",
     "shell.execute_reply": "2024-06-13T15:58:48.178428Z"
    },
    "papermill": {
     "duration": 0.01591,
     "end_time": "2024-06-13T15:58:48.181268",
     "exception": false,
     "start_time": "2024-06-13T15:58:48.165358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# remove spaces on the column\n",
    "dataset.columns = dataset.columns.str.lstrip()\n",
    "dataset.columns = dataset.columns.str.rstrip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5e73cdeb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:48.200048Z",
     "iopub.status.busy": "2024-06-13T15:58:48.199613Z",
     "iopub.status.idle": "2024-06-13T15:58:48.691355Z",
     "shell.execute_reply": "2024-06-13T15:58:48.690443Z"
    },
    "papermill": {
     "duration": 0.50305,
     "end_time": "2024-06-13T15:58:48.693557",
     "exception": false,
     "start_time": "2024-06-13T15:58:48.190507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,10))\n",
    "sns.histplot(dataset[\"_tempm\"],bins=[i for i in range(0,61,5)],kde=False)\n",
    "plt.title(\"Distribution of temperature\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e628d5fc",
   "metadata": {
    "papermill": {
     "duration": 0.008899,
     "end_time": "2024-06-13T15:58:48.712845",
     "exception": false,
     "start_time": "2024-06-13T15:58:48.703946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b72e99e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:48.732159Z",
     "iopub.status.busy": "2024-06-13T15:58:48.731858Z",
     "iopub.status.idle": "2024-06-13T15:58:49.231743Z",
     "shell.execute_reply": "2024-06-13T15:58:49.230869Z"
    },
    "papermill": {
     "duration": 0.511858,
     "end_time": "2024-06-13T15:58:49.233696",
     "exception": false,
     "start_time": "2024-06-13T15:58:48.721838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_dewptm</th>\n",
       "      <th>_fog</th>\n",
       "      <th>_hail</th>\n",
       "      <th>_hum</th>\n",
       "      <th>_rain</th>\n",
       "      <th>_snow</th>\n",
       "      <th>_tempm</th>\n",
       "      <th>_thunder</th>\n",
       "      <th>_tornado</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime_utc</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1996-11-01 11:00:00</th>\n",
       "      <td>9.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-11-01 12:00:00</th>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-11-01 13:00:00</th>\n",
       "      <td>11.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-11-01 14:00:00</th>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-11-01 16:00:00</th>\n",
       "      <td>11.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     _dewptm  _fog  _hail  _hum  _rain  _snow  _tempm  \\\n",
       "datetime_utc                                                            \n",
       "1996-11-01 11:00:00      9.0     0      0  27.0      0      0    30.0   \n",
       "1996-11-01 12:00:00     10.0     0      0  32.0      0      0    28.0   \n",
       "1996-11-01 13:00:00     11.0     0      0  44.0      0      0    24.0   \n",
       "1996-11-01 14:00:00     10.0     0      0  41.0      0      0    24.0   \n",
       "1996-11-01 16:00:00     11.0     0      0  47.0      0      0    23.0   \n",
       "\n",
       "                     _thunder  _tornado  \n",
       "datetime_utc                             \n",
       "1996-11-01 11:00:00         0         0  \n",
       "1996-11-01 12:00:00         0         0  \n",
       "1996-11-01 13:00:00         0         0  \n",
       "1996-11-01 14:00:00         0         0  \n",
       "1996-11-01 16:00:00         0         0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# set data index as datetime column\n",
    "dataset.index = pd.to_datetime(dataset.datetime_utc)\n",
    "\n",
    "# filter the columns by only the required_columns\n",
    "required_cols = ['_dewptm', '_fog', '_hail', '_hum', '_rain', '_snow', '_tempm', '_thunder', '_tornado']\n",
    "dataset = dataset[required_cols]\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1759bbe9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:49.254482Z",
     "iopub.status.busy": "2024-06-13T15:58:49.253782Z",
     "iopub.status.idle": "2024-06-13T15:58:49.261408Z",
     "shell.execute_reply": "2024-06-13T15:58:49.260533Z"
    },
    "papermill": {
     "duration": 0.019819,
     "end_time": "2024-06-13T15:58:49.263457",
     "exception": false,
     "start_time": "2024-06-13T15:58:49.243638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "_dewptm     621\n",
       "_fog          0\n",
       "_hail         0\n",
       "_hum        757\n",
       "_rain         0\n",
       "_snow         0\n",
       "_tempm      673\n",
       "_thunder      0\n",
       "_tornado      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# check number of nan values in dataframe\n",
    "dataset.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "73612c3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:49.285258Z",
     "iopub.status.busy": "2024-06-13T15:58:49.284471Z",
     "iopub.status.idle": "2024-06-13T15:58:49.305192Z",
     "shell.execute_reply": "2024-06-13T15:58:49.304228Z"
    },
    "papermill": {
     "duration": 0.033284,
     "end_time": "2024-06-13T15:58:49.307203",
     "exception": false,
     "start_time": "2024-06-13T15:58:49.273919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/1898405648.py:2: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  dataset=dataset.fillna(method='ffill')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_dewptm</th>\n",
       "      <th>_fog</th>\n",
       "      <th>_hail</th>\n",
       "      <th>_hum</th>\n",
       "      <th>_rain</th>\n",
       "      <th>_snow</th>\n",
       "      <th>_tempm</th>\n",
       "      <th>_thunder</th>\n",
       "      <th>_tornado</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime_utc</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1996-11-01 11:00:00</th>\n",
       "      <td>9.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-11-01 12:00:00</th>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-11-01 13:00:00</th>\n",
       "      <td>11.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-11-01 14:00:00</th>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-11-01 16:00:00</th>\n",
       "      <td>11.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     _dewptm  _fog  _hail  _hum  _rain  _snow  _tempm  \\\n",
       "datetime_utc                                                            \n",
       "1996-11-01 11:00:00      9.0     0      0  27.0      0      0    30.0   \n",
       "1996-11-01 12:00:00     10.0     0      0  32.0      0      0    28.0   \n",
       "1996-11-01 13:00:00     11.0     0      0  44.0      0      0    24.0   \n",
       "1996-11-01 14:00:00     10.0     0      0  41.0      0      0    24.0   \n",
       "1996-11-01 16:00:00     11.0     0      0  47.0      0      0    23.0   \n",
       "\n",
       "                     _thunder  _tornado  \n",
       "datetime_utc                             \n",
       "1996-11-01 11:00:00         0         0  \n",
       "1996-11-01 12:00:00         0         0  \n",
       "1996-11-01 13:00:00         0         0  \n",
       "1996-11-01 14:00:00         0         0  \n",
       "1996-11-01 16:00:00         0         0  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Let's remove the nan values\n",
    "dataset=dataset.fillna(method='ffill')\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ace89365",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:49.328054Z",
     "iopub.status.busy": "2024-06-13T15:58:49.327783Z",
     "iopub.status.idle": "2024-06-13T15:58:49.358715Z",
     "shell.execute_reply": "2024-06-13T15:58:49.357872Z"
    },
    "papermill": {
     "duration": 0.043655,
     "end_time": "2024-06-13T15:58:49.360608",
     "exception": false,
     "start_time": "2024-06-13T15:58:49.316953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_dewptm</th>\n",
       "      <th>_fog</th>\n",
       "      <th>_hail</th>\n",
       "      <th>_hum</th>\n",
       "      <th>_rain</th>\n",
       "      <th>_snow</th>\n",
       "      <th>_tempm</th>\n",
       "      <th>_thunder</th>\n",
       "      <th>_tornado</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime_utc</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1996-11-01</th>\n",
       "      <td>11.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>52.916667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-11-02</th>\n",
       "      <td>10.458333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.625000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.916667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-11-03</th>\n",
       "      <td>12.041667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.958333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.791667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-11-04</th>\n",
       "      <td>10.222222</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.055556</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.722222</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-11-05</th>\n",
       "      <td>8.200000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.400000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.800000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                _dewptm  _fog  _hail       _hum  _rain  _snow     _tempm  \\\n",
       "datetime_utc                                                               \n",
       "1996-11-01    11.666667   0.0    0.0  52.916667    0.0    0.0  22.333333   \n",
       "1996-11-02    10.458333   0.0    0.0  48.625000    0.0    0.0  22.916667   \n",
       "1996-11-03    12.041667   0.0    0.0  55.958333    0.0    0.0  21.791667   \n",
       "1996-11-04    10.222222   0.0    0.0  48.055556    0.0    0.0  22.722222   \n",
       "1996-11-05     8.200000   0.0    0.0  29.400000    0.0    0.0  27.800000   \n",
       "\n",
       "              _thunder  _tornado  \n",
       "datetime_utc                      \n",
       "1996-11-01         0.0       0.0  \n",
       "1996-11-02         0.0       0.0  \n",
       "1996-11-03         0.0       0.0  \n",
       "1996-11-04         0.0       0.0  \n",
       "1996-11-05         0.0       0.0  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "da_final=dataset.resample(\"D\").mean()\n",
    "da_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5e999322",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:49.381653Z",
     "iopub.status.busy": "2024-06-13T15:58:49.381398Z",
     "iopub.status.idle": "2024-06-13T15:58:49.388922Z",
     "shell.execute_reply": "2024-06-13T15:58:49.388109Z"
    },
    "papermill": {
     "duration": 0.020184,
     "end_time": "2024-06-13T15:58:49.390797",
     "exception": false,
     "start_time": "2024-06-13T15:58:49.370613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "_dewptm     141\n",
       "_fog        141\n",
       "_hail       141\n",
       "_hum        141\n",
       "_rain       141\n",
       "_snow       141\n",
       "_tempm      141\n",
       "_thunder    141\n",
       "_tornado    141\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "da_final.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0f3ef452",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:49.413026Z",
     "iopub.status.busy": "2024-06-13T15:58:49.412412Z",
     "iopub.status.idle": "2024-06-13T15:58:49.421212Z",
     "shell.execute_reply": "2024-06-13T15:58:49.420321Z"
    },
    "papermill": {
     "duration": 0.021893,
     "end_time": "2024-06-13T15:58:49.423147",
     "exception": false,
     "start_time": "2024-06-13T15:58:49.401254",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/3451548580.py:1: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  da_final=da_final.fillna(method=\"ffill\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "_dewptm     0\n",
       "_fog        0\n",
       "_hail       0\n",
       "_hum        0\n",
       "_rain       0\n",
       "_snow       0\n",
       "_tempm      0\n",
       "_thunder    0\n",
       "_tornado    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "da_final=da_final.fillna(method=\"ffill\")\n",
    "da_final.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e21c3703",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:49.445080Z",
     "iopub.status.busy": "2024-06-13T15:58:49.444807Z",
     "iopub.status.idle": "2024-06-13T15:58:49.472361Z",
     "shell.execute_reply": "2024-06-13T15:58:49.471519Z"
    },
    "papermill": {
     "duration": 0.040159,
     "end_time": "2024-06-13T15:58:49.474062",
     "exception": false,
     "start_time": "2024-06-13T15:58:49.433903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train X shape: (5976, 10, 9)\n",
      "Train Y shape: (5976,)\n",
      "Test X shape: (1494, 10, 9)\n",
      "Test Y shape: (1494,)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scaler=MinMaxScaler()\n",
    "scaled_data=scaler.fit_transform(da_final)\n",
    "\n",
    "sequence_length=10\n",
    "num_features=len(da_final.columns)\n",
    "\n",
    "\n",
    "sequences=[]\n",
    "labels=[]\n",
    "\n",
    "for i in range(len(scaled_data)-sequence_length):\n",
    "    seq=scaled_data[i:i+sequence_length]\n",
    "    label=scaled_data[i+sequence_length][6]\n",
    "    sequences.append(seq)\n",
    "    labels.append(label)\n",
    "    \n",
    "#Convert to numpy array\n",
    "sequences=np.array(sequences)\n",
    "labels=np.array(labels)\n",
    "\n",
    "#Split the dataset into training and testing\n",
    "\n",
    "train_size=int(0.80*len(sequences))\n",
    "\n",
    "train_x, test_x=sequences[:train_size],sequences[train_size:]\n",
    "train_y,test_y=labels[:train_size],labels[train_size:]\n",
    "\n",
    "print(\"Train X shape:\", train_x.shape)\n",
    "print(\"Train Y shape:\", train_y.shape)\n",
    "print(\"Test X shape:\", test_x.shape)\n",
    "print(\"Test Y shape:\", test_y.shape)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "00372095",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:49.495872Z",
     "iopub.status.busy": "2024-06-13T15:58:49.495611Z",
     "iopub.status.idle": "2024-06-13T15:58:49.501594Z",
     "shell.execute_reply": "2024-06-13T15:58:49.500789Z"
    },
    "papermill": {
     "duration": 0.018894,
     "end_time": "2024-06-13T15:58:49.503501",
     "exception": false,
     "start_time": "2024-06-13T15:58:49.484607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.44471154, 0.        , 0.        , ..., 0.46387643, 0.        ,\n",
       "        0.        ],\n",
       "       [0.40784486, 0.        , 0.        , ..., 0.48044345, 0.        ,\n",
       "        0.        ],\n",
       "       [0.45615292, 0.        , 0.        , ..., 0.44849278, 0.        ,\n",
       "        0.        ],\n",
       "       ...,\n",
       "       [0.71116864, 0.        , 0.        , ..., 0.76397608, 0.2       ,\n",
       "        0.        ],\n",
       "       [0.55022652, 0.        , 0.        , ..., 0.76326607, 0.        ,\n",
       "        0.        ],\n",
       "       [0.5420541 , 0.        , 0.        , ..., 0.73841555, 0.        ,\n",
       "        0.        ]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8fad8fcb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:49.525960Z",
     "iopub.status.busy": "2024-06-13T15:58:49.525335Z",
     "iopub.status.idle": "2024-06-13T15:58:49.530382Z",
     "shell.execute_reply": "2024-06-13T15:58:49.529604Z"
    },
    "papermill": {
     "duration": 0.018144,
     "end_time": "2024-06-13T15:58:49.532290",
     "exception": false,
     "start_time": "2024-06-13T15:58:49.514146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Some observation\n",
    "train_x.shape[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d58f86f4",
   "metadata": {
    "papermill": {
     "duration": 0.010182,
     "end_time": "2024-06-13T15:58:49.552860",
     "exception": false,
     "start_time": "2024-06-13T15:58:49.542678",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Model Creation**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c3c978bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:49.575338Z",
     "iopub.status.busy": "2024-06-13T15:58:49.574609Z",
     "iopub.status.idle": "2024-06-13T15:58:49.579281Z",
     "shell.execute_reply": "2024-06-13T15:58:49.578368Z"
    },
    "papermill": {
     "duration": 0.017719,
     "end_time": "2024-06-13T15:58:49.581186",
     "exception": false,
     "start_time": "2024-06-13T15:58:49.563467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10, 9)\n"
     ]
    }
   ],
   "source": [
    "in_shape=(train_x.shape[1],train_x.shape[2])\n",
    "print(in_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b474de3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:49.603768Z",
     "iopub.status.busy": "2024-06-13T15:58:49.603255Z",
     "iopub.status.idle": "2024-06-13T15:58:50.841262Z",
     "shell.execute_reply": "2024-06-13T15:58:50.840449Z"
    },
    "papermill": {
     "duration": 1.251747,
     "end_time": "2024-06-13T15:58:50.843568",
     "exception": false,
     "start_time": "2024-06-13T15:58:49.591821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n",
    "\n",
    "# Create the LSTM model\n",
    "model = Sequential()\n",
    "\n",
    "# Add LSTM layers with dropout\n",
    "model.add(LSTM(units=128, input_shape=(train_x.shape[1], train_x.shape[2]), return_sequences=True))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(LSTM(units=64, return_sequences=True))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(LSTM(units=32, return_sequences=False))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "# Add a dense output layer\n",
    "model.add(Dense(units=1))\n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss='mean_squared_error')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e0c12bb8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:50.867447Z",
     "iopub.status.busy": "2024-06-13T15:58:50.867129Z",
     "iopub.status.idle": "2024-06-13T15:58:50.870798Z",
     "shell.execute_reply": "2024-06-13T15:58:50.870001Z"
    },
    "papermill": {
     "duration": 0.017685,
     "end_time": "2024-06-13T15:58:50.872612",
     "exception": false,
     "start_time": "2024-06-13T15:58:50.854927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# model.compile(optimizer=\"adam\",loss=\"mean_squared_error\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bc452962",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:50.895806Z",
     "iopub.status.busy": "2024-06-13T15:58:50.895146Z",
     "iopub.status.idle": "2024-06-13T15:58:50.915240Z",
     "shell.execute_reply": "2024-06-13T15:58:50.914376Z"
    },
    "papermill": {
     "duration": 0.03359,
     "end_time": "2024-06-13T15:58:50.917089",
     "exception": false,
     "start_time": "2024-06-13T15:58:50.883499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)        │        <span style=\"color: #00af00; text-decoration-color: #00af00\">70,656</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ lstm_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">49,408</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ lstm_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">12,416</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">33</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ lstm (\u001b[38;5;33mLSTM\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m128\u001b[0m)        │        \u001b[38;5;34m70,656\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m128\u001b[0m)        │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ lstm_1 (\u001b[38;5;33mLSTM\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m64\u001b[0m)         │        \u001b[38;5;34m49,408\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m64\u001b[0m)         │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ lstm_2 (\u001b[38;5;33mLSTM\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │        \u001b[38;5;34m12,416\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │            \u001b[38;5;34m33\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">132,513</span> (517.63 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m132,513\u001b[0m (517.63 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">132,513</span> (517.63 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m132,513\u001b[0m (517.63 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2261325f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:50.941491Z",
     "iopub.status.busy": "2024-06-13T15:58:50.940874Z",
     "iopub.status.idle": "2024-06-13T15:58:50.949030Z",
     "shell.execute_reply": "2024-06-13T15:58:50.948221Z"
    },
    "papermill": {
     "duration": 0.022328,
     "end_time": "2024-06-13T15:58:50.950901",
     "exception": false,
     "start_time": "2024-06-13T15:58:50.928573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0.44471154, 0.        , 0.        , ..., 0.46387643,\n",
       "         0.        , 0.        ],\n",
       "        [0.40784486, 0.        , 0.        , ..., 0.48044345,\n",
       "         0.        , 0.        ],\n",
       "        [0.45615292, 0.        , 0.        , ..., 0.44849278,\n",
       "         0.        , 0.        ],\n",
       "        ...,\n",
       "        [0.33538277, 0.        , 0.        , ..., 0.42600897,\n",
       "         0.        , 0.        ],\n",
       "        [0.32590607, 0.        , 0.        , ..., 0.3950265 ,\n",
       "         0.        , 0.        ],\n",
       "        [0.29262204, 0.        , 0.        , ..., 0.41051773,\n",
       "         0.        , 0.        ]],\n",
       "\n",
       "       [[0.40784486, 0.        , 0.        , ..., 0.48044345,\n",
       "         0.        , 0.        ],\n",
       "        [0.45615292, 0.        , 0.        , ..., 0.44849278,\n",
       "         0.        , 0.        ],\n",
       "        [0.40064103, 0.        , 0.        , ..., 0.47492111,\n",
       "         0.        , 0.        ],\n",
       "        ...,\n",
       "        [0.32590607, 0.        , 0.        , ..., 0.3950265 ,\n",
       "         0.        , 0.        ],\n",
       "        [0.29262204, 0.        , 0.        , ..., 0.41051773,\n",
       "         0.        , 0.        ],\n",
       "        [0.26518684, 0.        , 0.        , ..., 0.45687918,\n",
       "         0.        , 0.        ]],\n",
       "\n",
       "       [[0.45615292, 0.        , 0.        , ..., 0.44849278,\n",
       "         0.        , 0.        ],\n",
       "        [0.40064103, 0.        , 0.        , ..., 0.47492111,\n",
       "         0.        , 0.        ],\n",
       "        [0.33894231, 0.        , 0.        , ..., 0.61913303,\n",
       "         0.        , 0.        ],\n",
       "        ...,\n",
       "        [0.29262204, 0.        , 0.        , ..., 0.41051773,\n",
       "         0.        , 0.        ],\n",
       "        [0.26518684, 0.        , 0.        , ..., 0.45687918,\n",
       "         0.        , 0.        ],\n",
       "        [0.31885632, 0.        , 0.        , ..., 0.49582711,\n",
       "         0.        , 0.        ]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0.55512997, 0.        , 0.        , ..., 0.48686739,\n",
       "         0.        , 0.        ],\n",
       "        [0.64811391, 0.        , 0.        , ..., 0.51121076,\n",
       "         0.        , 0.        ],\n",
       "        [0.59726331, 0.16666667, 0.        , ..., 0.49701046,\n",
       "         0.        , 0.        ],\n",
       "        ...,\n",
       "        [0.55658284, 0.        , 0.        , ..., 0.4733433 ,\n",
       "         0.        , 0.        ],\n",
       "        [0.58564032, 0.        , 0.        , ..., 0.49498185,\n",
       "         0.        , 0.        ],\n",
       "        [0.65319896, 0.        , 0.        , ..., 0.46860987,\n",
       "         0.        , 0.        ]],\n",
       "\n",
       "       [[0.64811391, 0.        , 0.        , ..., 0.51121076,\n",
       "         0.        , 0.        ],\n",
       "        [0.59726331, 0.16666667, 0.        , ..., 0.49701046,\n",
       "         0.        , 0.        ],\n",
       "        [0.60743343, 0.        , 0.        , ..., 0.44020927,\n",
       "         0.        , 0.        ],\n",
       "        ...,\n",
       "        [0.58564032, 0.        , 0.        , ..., 0.49498185,\n",
       "         0.        , 0.        ],\n",
       "        [0.65319896, 0.        , 0.        , ..., 0.46860987,\n",
       "         0.        , 0.        ],\n",
       "        [0.57183802, 0.        , 0.        , ..., 0.65794718,\n",
       "         0.16666667, 0.        ]],\n",
       "\n",
       "       [[0.59726331, 0.16666667, 0.        , ..., 0.49701046,\n",
       "         0.        , 0.        ],\n",
       "        [0.60743343, 0.        , 0.        , ..., 0.44020927,\n",
       "         0.        , 0.        ],\n",
       "        [0.57692308, 0.        , 0.        , ..., 0.46387643,\n",
       "         0.        , 0.        ],\n",
       "        ...,\n",
       "        [0.65319896, 0.        , 0.        , ..., 0.46860987,\n",
       "         0.        , 0.        ],\n",
       "        [0.57183802, 0.        , 0.        , ..., 0.65794718,\n",
       "         0.16666667, 0.        ],\n",
       "        [0.59217825, 0.        , 0.        , ..., 0.50647733,\n",
       "         0.        , 0.        ]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "08603d05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:58:50.975463Z",
     "iopub.status.busy": "2024-06-13T15:58:50.975168Z",
     "iopub.status.idle": "2024-06-13T15:59:14.670139Z",
     "shell.execute_reply": "2024-06-13T15:59:14.669385Z"
    },
    "papermill": {
     "duration": 23.709582,
     "end_time": "2024-06-13T15:59:14.672070",
     "exception": false,
     "start_time": "2024-06-13T15:58:50.962488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "\u001b[1m72/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0709\n",
      "Epoch 1: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 18ms/step - loss: 0.0687 - val_loss: 0.0050\n",
      "Epoch 2/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0100\n",
      "Epoch 2: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0100 - val_loss: 0.0050\n",
      "Epoch 3/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0095\n",
      "Epoch 3: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0094 - val_loss: 0.0041\n",
      "Epoch 4/100\n",
      "\u001b[1m68/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0084\n",
      "Epoch 4: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.0085 - val_loss: 0.0040\n",
      "Epoch 5/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0083\n",
      "Epoch 5: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0083 - val_loss: 0.0042\n",
      "Epoch 6/100\n",
      "\u001b[1m71/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0080\n",
      "Epoch 6: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0080 - val_loss: 0.0041\n",
      "Epoch 7/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0075\n",
      "Epoch 7: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0075 - val_loss: 0.0036\n",
      "Epoch 8/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0072\n",
      "Epoch 8: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0072 - val_loss: 0.0036\n",
      "Epoch 9/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0069\n",
      "Epoch 9: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0069 - val_loss: 0.0036\n",
      "Epoch 10/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0068\n",
      "Epoch 10: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0068 - val_loss: 0.0035\n",
      "Epoch 11/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.0066\n",
      "Epoch 11: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.0066 - val_loss: 0.0034\n",
      "Epoch 12/100\n",
      "\u001b[1m71/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.0068\n",
      "Epoch 12: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.0067 - val_loss: 0.0033\n",
      "Epoch 13/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0067\n",
      "Epoch 13: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0067 - val_loss: 0.0033\n",
      "Epoch 14/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0059\n",
      "Epoch 14: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0059 - val_loss: 0.0030\n",
      "Epoch 15/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0062\n",
      "Epoch 15: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0062 - val_loss: 0.0029\n",
      "Epoch 16/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0057\n",
      "Epoch 16: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0057 - val_loss: 0.0028\n",
      "Epoch 17/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0050\n",
      "Epoch 17: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0050 - val_loss: 0.0027\n",
      "Epoch 18/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0050\n",
      "Epoch 18: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0050 - val_loss: 0.0026\n",
      "Epoch 19/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0049\n",
      "Epoch 19: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0049 - val_loss: 0.0027\n",
      "Epoch 20/100\n",
      "\u001b[1m72/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0050\n",
      "Epoch 20: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.0050 - val_loss: 0.0026\n",
      "Epoch 21/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0046\n",
      "Epoch 21: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0046 - val_loss: 0.0025\n",
      "Epoch 22/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0044\n",
      "Epoch 22: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0044 - val_loss: 0.0024\n",
      "Epoch 23/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0042\n",
      "Epoch 23: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0042 - val_loss: 0.0024\n",
      "Epoch 24/100\n",
      "\u001b[1m72/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0045\n",
      "Epoch 24: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0045 - val_loss: 0.0024\n",
      "Epoch 25/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0043\n",
      "Epoch 25: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0043 - val_loss: 0.0023\n",
      "Epoch 26/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0040\n",
      "Epoch 26: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0040 - val_loss: 0.0023\n",
      "Epoch 27/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0040\n",
      "Epoch 27: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0040 - val_loss: 0.0023\n",
      "Epoch 28/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0041\n",
      "Epoch 28: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0041 - val_loss: 0.0025\n",
      "Epoch 29/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0039\n",
      "Epoch 29: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0040 - val_loss: 0.0025\n",
      "Epoch 30/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0038\n",
      "Epoch 30: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0038 - val_loss: 0.0024\n",
      "Epoch 31/100\n",
      "\u001b[1m73/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0036\n",
      "Epoch 31: saving model to /kaggle/working/model.weights.h5\n",
      "\u001b[1m75/75\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.0036 - val_loss: 0.0027\n"
     ]
    }
   ],
   "source": [
    "# Define callbacks\n",
    "early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "checkpoint_path=\"/kaggle/working/model.weights.h5\"\n",
    "cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,\n",
    "                                                 save_weights_only=True,\n",
    "                                                 verbose=1)\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_x, train_y,\n",
    "    epochs=100,\n",
    "    batch_size=64,\n",
    "    validation_split=0.2,  # Use part of the training data as validation\n",
    "    callbacks=[early_stopping, cp_callback]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bd9a5f8",
   "metadata": {
    "papermill": {
     "duration": 0.040391,
     "end_time": "2024-06-13T15:59:14.753603",
     "exception": false,
     "start_time": "2024-06-13T15:59:14.713212",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3bb25e26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:59:14.835626Z",
     "iopub.status.busy": "2024-06-13T15:59:14.835319Z",
     "iopub.status.idle": "2024-06-13T15:59:15.010243Z",
     "shell.execute_reply": "2024-06-13T15:59:15.009262Z"
    },
    "papermill": {
     "duration": 0.218401,
     "end_time": "2024-06-13T15:59:15.012193",
     "exception": false,
     "start_time": "2024-06-13T15:59:14.793792",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0022\n",
      "Test Loss: 0.002185577293857932\n"
     ]
    }
   ],
   "source": [
    "#Evaluate the best model on the test set\n",
    "test_loss=model.evaluate(test_x,test_y)\n",
    "print(\"Test Loss:\",test_loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ce0ad0d",
   "metadata": {
    "papermill": {
     "duration": 0.040538,
     "end_time": "2024-06-13T15:59:15.094616",
     "exception": false,
     "start_time": "2024-06-13T15:59:15.054078",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Traning and Validation Loss**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d2a9da84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:59:15.177909Z",
     "iopub.status.busy": "2024-06-13T15:59:15.177593Z",
     "iopub.status.idle": "2024-06-13T15:59:15.465735Z",
     "shell.execute_reply": "2024-06-13T15:59:15.464847Z"
    },
    "papermill": {
     "duration": 0.331938,
     "end_time": "2024-06-13T15:59:15.467657",
     "exception": false,
     "start_time": "2024-06-13T15:59:15.135719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title(\"Model Loss\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.legend([\"Train\",\"Validation\"],loc=\"upper right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ca59e98",
   "metadata": {
    "papermill": {
     "duration": 0.041163,
     "end_time": "2024-06-13T15:59:15.550503",
     "exception": false,
     "start_time": "2024-06-13T15:59:15.509340",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "****"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "04e1df4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:59:15.678617Z",
     "iopub.status.busy": "2024-06-13T15:59:15.677748Z",
     "iopub.status.idle": "2024-06-13T15:59:16.300287Z",
     "shell.execute_reply": "2024-06-13T15:59:16.299239Z"
    },
    "papermill": {
     "duration": 0.71027,
     "end_time": "2024-06-13T15:59:16.302223",
     "exception": false,
     "start_time": "2024-06-13T15:59:15.591953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "Mean Absolute Error (MAE): 0.03670625600736133\n",
      "Mean Squared Error (MSE): 0.002185577115618976\n",
      "Root Mean Squared Error (RMSE): 0.04675015631651916\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "\n",
    "# Assuming you have trained the model and have the 'best_model' object\n",
    "# Also, 'test_x' and 'test_y' should be available\n",
    "\n",
    "# Predict temperatures using the trained model\n",
    "predictions = model.predict(test_x)\n",
    "\n",
    "# Calculate evaluation metrics\n",
    "mae = mean_absolute_error(test_y, predictions)\n",
    "mse = mean_squared_error(test_y, predictions)\n",
    "rmse = np.sqrt(mse)\n",
    "\n",
    "print(\"Mean Absolute Error (MAE):\", mae)\n",
    "print(\"Mean Squared Error (MSE):\", mse)\n",
    "print(\"Root Mean Squared Error (RMSE):\", rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "09534f66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:59:16.388707Z",
     "iopub.status.busy": "2024-06-13T15:59:16.388408Z",
     "iopub.status.idle": "2024-06-13T15:59:16.563029Z",
     "shell.execute_reply": "2024-06-13T15:59:16.562312Z"
    },
    "papermill": {
     "duration": 0.219641,
     "end_time": "2024-06-13T15:59:16.564972",
     "exception": false,
     "start_time": "2024-06-13T15:59:16.345331",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n"
     ]
    }
   ],
   "source": [
    "#y_true values\n",
    "test_y_copies=np.repeat(test_y.reshape(-1,1),test_x.shape[-1],axis=-1)\n",
    "true_temp=scaler.inverse_transform(test_y_copies)[:,6]\n",
    "\n",
    "prediction=model.predict(test_x)\n",
    "prediction_copies=np.repeat(prediction, 9, axis=-1)\n",
    "predicted_temp=scaler.inverse_transform(prediction_copies)[:,6]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6275c781",
   "metadata": {
    "papermill": {
     "duration": 0.044721,
     "end_time": "2024-06-13T15:59:16.652486",
     "exception": false,
     "start_time": "2024-06-13T15:59:16.607765",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Plotting predicted and actual temperatures**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4cd6e5ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T15:59:16.738347Z",
     "iopub.status.busy": "2024-06-13T15:59:16.737987Z",
     "iopub.status.idle": "2024-06-13T15:59:17.026914Z",
     "shell.execute_reply": "2024-06-13T15:59:17.026023Z"
    },
    "papermill": {
     "duration": 0.333858,
     "end_time": "2024-06-13T15:59:17.028975",
     "exception": false,
     "start_time": "2024-06-13T15:59:16.695117",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(da_final.index[-100:],true_temp[-100:],label=\"Actual\")\n",
    "plt.plot(da_final.index[-100:],predicted_temp[-100:],label=\"Predicted\")\n",
    "plt.title(\"Temperature Prediction vs Actual\")\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Temperature\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 1118,
     "sourceId": 2090,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30733,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 48.294776,
   "end_time": "2024-06-13T15:59:19.680370",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-13T15:58:31.385594",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
